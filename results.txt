Example results:


Message('JDXMPECCAMR')	[Distance: 20]
Message('ZYBHQRLIYF DI')	[Distance: 19]
Message('A UZIZIGFJ')	[Distance: 20]
Message('SKYNET IS NOW ONLINE')	[Distance: 0]
Message('SKYNET IS NOW ONLINE')	[Distance: 0]
500	194   	0.24      	1.69776 	0  	17



My crossover function works fine, though it does have different results than the
built in function. This makes sense as the functions both have random numbers,
but are set up differently.

Changing the number of generations the program runs for has the expected effect,
string that take a long time to evolve can evolve given the additional
generations.  Ex:

Message('TESTING TESTING')	[Distance: 0]
1000	183   	0.15     	1.28095  	0  	16

Changing the population size has a similar effect (more possibilities to select
from each generation).

Changing the crossover probability generally had a negative effect. Raising it
could result in the solutions diverging form the goal. Lowering it made the
strings evolve too slowly. I suspect there is a middle ground, but due to the
randomness of the process it is difficult to find.

Changing the probability of mutation had more neutral effects. If raised too
high or too low it would have negative effects, but I found that increasing it
to around .9 generally had a positive effect. Without extensive testing however,
it is not possible to be certain if this is generally true, or just happened to
occur in my tests. Repeated testing without using a seed could allow
investigation of trends, but it would be time consuming (I could write a program
to do it for me, but I have other things to do).

Using a preset starting string (a homogeneous population) has negative effects
on the result. It makes the crossover function ineffective. This correspond to
having a nondiverse population and insufficeint genetic diversity. It is
effectively inbreeding.

Modifying the distance function to incorporate the distance between
letters had a negative effect. Becuase of the extreme penalties for
changing to the wrong length the evolutionary algorithm quickly got
strings of the right length, but then deletion and insertion type
mutations were to costly to be feasible. This meant that only
substitution-type mutations occured, reducing the rate at which the
strings evolved. This led to slower optimization, and required more
genarations to evolve into the correct string.

When using the eaMuPlusLambda algorithm I generally found I achieved
worse results than with eaSimple. This may be because of bad choices
for mu and lambda. However, even after a fair bit of experimentation, I
was unable to find a mu and lambda that averaged at least as well as
eaSimple did.